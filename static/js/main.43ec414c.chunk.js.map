{"version":3,"sources":["Services/config.js","Services/hash.js","Services/spotify-api.js","Components/PlaylistForm/PlaylistForm.js","Pages/Playlist/PlayList.js","Pages/App/App.js","serviceWorker.js","index.js"],"names":["scopes","hash","window","location","substring","split","reduce","initial","item","parts","decodeURIComponent","profileInfo","token","fetch","method","headers","mode","then","res","json","createArray","trackList","trackArr","forEach","tracks","push","uri","JSON","stringify","createPlaylist","user_id","data","body","dataType","ok","Error","createdList","id","PlaylistForm","state","name","description","public","showMessage","handleChange","e","setState","target","value","handleSubmit","a","preventDefault","props","console","log","className","onSubmit","this","for","type","placeholder","onChange","React","Component","PlayList","items","length","user","display_name","map","idx","src","album","images","url","alt","artists","App","duration_ms","is_playing","progress_ms","_token","access_token","results","userInfo","path","render","href","join","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.43ec414c.chunk.js","sourcesContent":["export const authEndpoint = \"https://accounts.spotify.com/authorize\";\n\n// Replace with your app's client ID, redirect URI and desired scopes\nexport const clientId = \"23707be4c54c4530a0edd2e5c1adef67\";\nexport const redirectUri = \"https://pgrilo92.github.io/replayit-spotify/\";\nexport const scopes = [\n    \"user-top-read\",\n    \"user-read-currently-playing\",\n    \"user-read-playback-state\",\n    \"playlist-modify-public\",\n];","const hash = window.location.hash\n    .substring(1)\n    .split(\"&\")\n    .reduce(function(initial, item) {\n    if (item) {\n        var parts = item.split(\"=\");\n        initial[parts[0]] = decodeURIComponent(parts[1]);\n    }\n    return initial;\n    }, {});\nwindow.location.hash = \"\";\n\nexport default hash;","/*--- Load the top songs once page is uploaded ---*/\nexport function getTopPlayedSongs(token) {\n    const playlistUrl='https://api.spotify.com/v1/me/top/tracks?time_range=short_term&limit=50'\n    return fetch(playlistUrl, \n        {\n            method: \"GET\",\n            headers: {\n                \"Authorization\": \"Bearer \" + token\n            },\n            mode: 'cors'\n        })\n        .then(res=> res.json())\n}\n\n/*--- get the user info from the api using the token ---*/\nexport function profileInfo(token) {\n    const profileUrl='https://api.spotify.com/v1/me'\n    return fetch(profileUrl, \n        {\n            method: \"GET\",\n            headers: {\n                \"Authorization\": \"Bearer \" + token\n            },\n            mode: 'cors'\n        })\n        .then(res => res.json())\n}\n\n/*--- function used create an array for track lists using the URI's to be used on the body of the post request ---*/\nfunction createArray(trackList) {\n    let trackArr = []\n    trackList.forEach((tracks) => trackArr.push(tracks.uri))\n    let uris = JSON.stringify(trackArr)\n    return uris\n}\n\n/*--- Create Playlists ---*/\nexport function createPlaylist(user_id, token, data, trackList) {\n\tlet playlistUrl = 'https://api.spotify.com/v1/users/' + user_id +\n        '/playlists';\n/*--- Creates a playlist with a a name description chosen by user ---*/\n\treturn fetch(playlistUrl, {\n\t\tmethod: 'POST',\n\t\tbody: JSON.stringify(data),\n\t\tdataType: 'json',\n\t\theaders: {\n\t\t\t'Authorization': 'Bearer ' + token,\n\t\t\t'Content-Type': 'application/json'\n        },\n        mode: 'cors'})\n    .then( res => {\n        if (res.ok) {\n            let createdList = res.json()\n            return createdList\n        }\n        throw new Error('Bad Credentials!')\n    })\n    .then((createdList)=> {\n/*--- Adds songs to the playlist created ---*/\n        return fetch(`https://api.spotify.com/v1/playlists/${createdList.id}/tracks`, {\n            method: 'POST',\n            body: createArray(trackList),\n            dataType: 'json',\n            headers: {\n                'Authorization': 'Bearer ' + token,\n                'Content-Type': 'application/json'\n            },\n            mode: 'cors'\n        })\n    })\n    .then( res => {\n            if (res.ok) return res.json()\n            throw new Error('Bad Credentials!')\n        }).then()\n    }\n\n","import React from 'react'\nimport './PlaylistForm.css'\nimport {createPlaylist} from '../../Services/spotify-api'\n\nclass PlaylistForm extends React.Component {   \n    state = {\n        name: '',\n        description: '',\n        public: true,\n        showMessage: \"completionMessage\"\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value,\n        })\n    }\n\n    handleSubmit =  async (e) => {\n        let data= {name:this.state.name, description: this.state.description, public: this.state.public}\n\n        e.preventDefault()\n        try {\n            await createPlaylist(this.props.user_id, this.props.token, data, this.props.trackList)\n            this.setState({showMessage: \"completionMessageShow\"})\n        } catch (err) {\n            console.log('error on submit')\n        }\n    }\n\n    render() {\n        return(\n            <>\n            <div className=\"row Create Playlist\">\n                <form onSubmit={this.handleSubmit}>\n                    <div className=\"form-group col-12\">\n                    <label for=\"name\">Playlist Name</label>\n                        <input className=\"form-control\" \n                            type=\"text\" \n                            name=\"name\" \n                            placeholder=\"Playlist name\" \n                            onChange={this.handleChange} />\n                    </div>\n                    <div className=\"form-group col-12\">\n                        <label for=\"description\">Description</label>\n                        <input className=\"form-control\" \n                            name=\"description\" \n                            placeholder=\"Description\" \n                            onChange={this.handleChange} />\n                    </div>\n                    <div className=\"form-group col-12\">\n                        <input className=\"btn btn-success playlist\" type=\"submit\" value=\"Create Playlist\" />\n                    </div>\n                </form>\n            </div>\n            <div className={this.state.showMessage}>\n                <p>Playlist {this.state.name} has been created </p>\n            </div>\n            </>\n            \n        )\n    }\n}\n\nexport default PlaylistForm","import React from 'react'\nimport './PlayList.css'\nimport PlaylistForm from '../../Components/PlaylistForm/PlaylistForm' \n\nconst PlayList = (props) => {\n    if(props.items.length < 1 && props.user===null) return <h2> No Props</h2>\n    return (\n        <div className=\"Playlist row\">\n            <div className=\"MostPlayed col-sm-12 col-md-12 col-lg-6\">\n                <ul className=\"list-group\">\n                <h1 className='user-name'>{props.user.display_name} Favourite Tracks</h1>\n                {\n                props.items.items.map((item, idx) => {\n                    return(\n                        <li className=\"list-group-item track-list\">\n                            <img className=\"list-img\"src={item.album.images[0].url} alt=\"track-img\" />\n                            <p>{idx + 1} - {item.name} - {item.artists[0].name} </p>\n                        </li>\n                    )\n                })}\n                </ul>\n            </div>\n            <div className=\"PlaylistForm col-sm-12 col-md-12 col-lg-6\">\n                <h1>Create Playlist</h1>\n                <PlaylistForm user_id={props.user.id} token={props.token} trackList={props.items.items}/>\n            </div>\n        </div>\n    )\n}\n\nexport default PlayList\n","import React, { Component } from \"react\";\nimport {Route} from 'react-router-dom'\nimport { authEndpoint, clientId, redirectUri, scopes } from \"../../Services/config\";\nimport hash from \"../../Services/hash\";\nimport PlayList from \"../Playlist/PlayList\";\nimport {getTopPlayedSongs, profileInfo} from '../../Services/spotify-api'\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      token: null,\n      item: {\n        album: {\n          images: [{ url: \"\" }]\n        },\n        name: \"\",\n        artists: [{ name: \"\" }],\n        duration_ms: 0\n      },\n      is_playing: \"Paused\",\n      progress_ms: 0,\n      items: [],\n      user: null\n    };\n  }\n  async componentDidMount() {\n    // Set token\n    let _token = hash.access_token;\n    if (_token) {\n      const results = await getTopPlayedSongs(_token)\n      const userInfo = await profileInfo(_token)\n      this.setState({\n        token: _token,\n        items: results,\n        user: userInfo\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Route path=\"/\" render={(props)=> \n            {return (!this.state.token) ? \n            (<>\n              <header className=\"App-header\">\n                <h1>Replay.It</h1>\n              </header>\n              <div className=\"login\">\n                <a\n                  className=\"button login-btn\"\n                  href={`${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\n                    \"%20\"\n                  )}&response_type=token&show_dialog=true`}\n                >\n                  Login to Spotify\n                </a>\n              </div>\n              <footer>\n                Joaquim Grilo &copy;\n              </footer>\n            </>)       \n            : \n            (<>\n              <PlayList \n                items={this.state.items}\n                user={this.state.user}\n                token={this.state.token}\n                {...props}\n              />\n            </>)\n            }\n          } />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Pages/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter as Router} from 'react-router-dom'\n\nReactDOM.render(<Router> <App /> </Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}